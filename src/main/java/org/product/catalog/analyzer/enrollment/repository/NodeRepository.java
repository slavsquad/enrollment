package org.product.catalog.analyzer.enrollment.repository;

import org.product.catalog.analyzer.enrollment.dto.Node;

import java.util.List;
import java.util.Set;
import java.util.UUID;

/**
 * Интерфейс, описывающий методы взаимодействия приложения с базой данных.
 *
 * @author Stepanenko Stanislav
 */
public interface NodeRepository {

    /**
     * Поиск узла в полную глубину по идентификатору.
     * Метод возвращает узел со всеми потомками, полностью отображая
     * структуру каталога товаров.
     *
     * @param id - идентификатор корневого узла(товара/категории).
     * @return узел со всеми потомками, или {@code null} если узел не найден.
     */
    Node findById(UUID id);

    /**
     * Сохранение узла(товара/категории) в каталоге товаров,
     * путем добавленные новой позиций либо обновление текущей.
     * Метод возвращает количество сохраненных позиций.
     *
     * @param node - узел, который необходимо добавить в каталог.
     * @return количество сохранённых позиций.
     */
    int save(Node node);

    /**
     * Сохранение списка узлов(товаров/категории) в каталоге товаров,
     * путем добавленные новых либо обновление текущих.
     * Метод возвращает количество сохраненных позиций.
     *
     * @param nodes - список узлов, который необходимо добавить в каталог.
     * @return количество сохранённых позиций.
     */
    int saveAll(List<Node> nodes);


    /**
     * Поиск идентификаторов имеющихся в каталоге категорий товаров.
     *
     * @return список идентификаторов категорий присутствующий в каталоге.
     */
    Set<UUID> findCategoryAllId();

    /**
     * Удаление узла по идентификатору.
     * Метод удаляет узел со всеми потомками если таковые имеются.
     *
     * @param id - идентификатор корневого узла(товара/категории).
     * @return количество удалённых узлов.
     */
    int deleteById(UUID id);
}
